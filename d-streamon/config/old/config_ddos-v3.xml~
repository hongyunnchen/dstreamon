<botstream>
	<!--source type="trace" name="/home/demons/tracce/didattica/1.pcap"/-->
	<source type="live" name="eth1"/>

	<statedef id="normal" />
	<statedef id="monitored"/>
	<statedef id="alert"/>
	<statedef id="quarantine"/>

	<metrics>
		<metric name="pkt_rate">
			<variation_detector status="on"/>
			<variation_monitor status="on" type="tewma" window="60"/>
		</metric>
	</metrics>

	<table name="tset" type="DLeft" key_type="" value_type="int" nhash="8" shash="20"/>
	<table name="oldvalue" type="DLeft" key_type="" value_type="double" nhash="8" shash="20"/>

	<features>
		<feature name="pkt_rate_f" body="pkt_rate"/>
	</features>

	<event type="timeout" class="ddos_burst" primary-key="ip_dst">
		<state id="monitored">
			<use-metric id="pkt_rate" vm_get="ip_dst"/>
			<condition expression="pkt_rate_f &gt; 1.2 * oldvalue(ip_dst)" action="" next_state="alert"/>
			<condition expression="pkt_rate_f &lt; 1.2 * oldvalue(ip_dst)" action="" next_state="normal">
				<timeout_set class="ddos_burst" key="ip_dst" value="0"/>
			</condition>
			<post-condition-action do="print(feature: %pkt_rate_f),print_tab,oldvalue(ip_dst)=pkt_rate_f,print(monitored timeout expired for %ip_dst)"/>
		</state>
		<state id="alert">
			<use-metric id="pkt_rate" vm_get="ip_dst"/>
			<condition expression="pkt_rate_f &gt; 1.2 * oldvalue(ip_dst)" action="print(putting %ip_dst in quarantine for 30 secs)" next_state="quarantine">
				<timeout_set class="ddos_burst" key="ip_dst" value="30"/>
			</condition>
			<condition expression="pkt_rate_f &lt; 1.2 * oldvalue(ip_dst)" action="" next_state="monitored"/>
			<post-condition-action do="print(feature: %pkt_rate_f),print_tab,oldvalue(ip_dst)=pkt_rate_f,print(alert timeout expired for %ip_dst)"/>
		</state>
		<state id="quarantine">
			<use-metric id="pkt_rate" vm_get="ip_dst"/>
			<condition expression="true" action="" next_state="monitored"/>
			<post-condition-action do="print(%ip_dst no longer in quarantine)">
				<timeout_set class="ddos_burst" key="ip_dst" value="10"/>
			</post-condition-action>
		</state>
	</event>

	<event type="packet" selector="proto tcp" primary-key="ip_dst">
		<state id="normal">
			<use-metric id="pkt_rate" vd_update="ip_src-ip_dst" vm_update="ip_dst"/>
			<condition expression="pkt_rate_f &gt; 10 and !tset(ip_dst)" action="tset(ip_dst)=0" next_state="monitored"/>
			<condition expression="pkt_rate_f &gt; 10 and tset(ip_dst) == 1" action="tset(ip_dst)=0,print(flow already analyzed)" next_state="monitored"/>
			<!--post-condition-action do="print(%ip_dst: normal value: %pkt_rate_f)"/-->
		</state>
		<state id="monitored">
			<use-metric id="pkt_rate" vd_update="ip_src-ip_dst" vm_update="ip_dst"/>
			<condition expression="tset(ip_dst) == 0" action="tset(ip_dst)=1,print(setting timeout for %ip_dst)" next_state="">
				<timeout_set class="ddos_burst" key="ip_dst" value="10"/>
			</condition>
			<!--post-condition-action do="print(%ip_dst: monitored value: %pkt_rate_f)"/-->
		</state>
		<state id="alert">
			<use-metric id="pkt_rate" vd_update="ip_src-ip_dst" vm_update="ip_dst"/>
			<condition expression="false" action="" next_state=""/>
			<post-condition-action do="print(%ip_dst: alert value: %pkt_rate_f)"/>
		</state>
		<state id="quarantine">
			<use-metric id="pkt_rate" vd_update="ip_src-ip_dst" vm_update="ip_dst"/>
			<condition expression="false" action="" next_state=""/>
			<post-condition-action do="print(%ip_dst: quarantine value: %pkt_rate_f)"/>
		</state>
	</event>
</botstream>
